// This file was generated by the tool gen.

#ifndef _GEOMETRY_MSGS_POINT_H_
#define _GEOMETRY_MSGS_POINT_H_

#include "../topic.hpp"

// Manualy include list

namespace geometry_msgs
{

class Point: public ros2::Topic<Point>
{
public:
    using SharedPtr = std::shared_ptr<Point>;

    double x;
    double y;
    double z;

    Point()
        : Topic("geometry_msgs::msg::dds_::Point_", "Point", GEOMETRY_MSGS_POINT_ID),
        x(0),
        y(0),
        z(0)
    {
    }

    bool serialize(void* msg_buf, Point* topic)
    {
        ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
        (void) ucdr_serialize_double(writer, topic->x);
        (void) ucdr_serialize_double(writer, topic->y);
        (void) ucdr_serialize_double(writer, topic->z);

        return !writer->error;
    }

    bool deserialize(void* msg_buf, Point* topic)
    {
        ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
        (void) ucdr_deserialize_double(reader, &topic->x);
        (void) ucdr_deserialize_double(reader, &topic->y);
        (void) ucdr_deserialize_double(reader, &topic->z);

        return !reader->error;
    }

    uint32_t size_of_topic(const Point* topic, uint32_t size)
    {
        (void) (topic);

        uint32_t previousSize = size;
        size += ucdr_alignment(size, 8) + 8;
        size += ucdr_alignment(size, 8) + 8;
        size += ucdr_alignment(size, 8) + 8;

        return size - previousSize;
    }

};

} // namespace geometry_msgs

#endif // _GEOMETRY_MSGS_POINT_H_