// This file was generated by the tool gen.

#ifndef _GEOMETRY_MSGS_POSE_H_
#define _GEOMETRY_MSGS_POSE_H_

#include "../topic.hpp"

// Manualy include list
// geometry_msgs::Point
// suggest
#include "geometry_msgs/Point.hpp"
// geometry_msgs::Quaternion
// suggest
#include "geometry_msgs/Quaternion.hpp"

namespace geometry_msgs
{

class Pose: public ros2::Topic<Pose>
{
public:
    using SharedPtr = std::shared_ptr<Pose>;

    geometry_msgs::Point position;
    geometry_msgs::Quaternion orientation;

    Pose()
        : Topic("geometry_msgs::msg::dds_::Pose_", "Pose", GEOMETRY_MSGS_POSE_ID)
    {
    }

    bool serialize(void* msg_buf, Pose* topic)
    {
        ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
        (void) position.serialize(writer, &topic->position);
        (void) orientation.serialize(writer, &topic->orientation);

        return !writer->error;
    }

    bool deserialize(void* msg_buf, Pose* topic)
    {
        ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
        (void) position.deserialize(reader, &topic->position);
        (void) orientation.deserialize(reader, &topic->orientation);

        return !reader->error;
    }

    uint32_t size_of_topic(const Pose* topic, uint32_t size)
    {
        (void) (topic);

        uint32_t previousSize = size;
        size += position.size_of_topic(&topic->position, size);
        size += orientation.size_of_topic(&topic->orientation, size);

        return size - previousSize;
    }

};

} // namespace geometry_msgs

#endif // _GEOMETRY_MSGS_POSE_H_