// This file was generated by the tool gen.

#ifndef _GEOMETRY_MSGS_TRANSFORM_H_
#define _GEOMETRY_MSGS_TRANSFORM_H_

#include "../topic.hpp"

// Manualy include list
// geometry_msgs::Vector3
// suggest
#include "geometry_msgs/Vector3.hpp"
// geometry_msgs::Quaternion
// suggest
#include "geometry_msgs/Quaternion.hpp"

namespace geometry_msgs
{

class Transform: public ros2::Topic<Transform>
{
public:
    using SharedPtr = std::shared_ptr<Transform>;

    geometry_msgs::Vector3 translation;
    geometry_msgs::Quaternion rotation;

    Transform()
        : Topic("geometry_msgs::msg::dds_::Transform_", "Transform", GEOMETRY_MSGS_TRANSFORM_ID)
    {
    }

    bool serialize(void* msg_buf, Transform* topic)
    {
        ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
        (void) translation.serialize(writer, &topic->translation);
        (void) rotation.serialize(writer, &topic->rotation);

        return !writer->error;
    }

    bool deserialize(void* msg_buf, Transform* topic)
    {
        ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
        (void) translation.deserialize(reader, &topic->translation);
        (void) rotation.deserialize(reader, &topic->rotation);

        return !reader->error;
    }

    uint32_t size_of_topic(const Transform* topic, uint32_t size)
    {
        (void) (topic);

        uint32_t previousSize = size;
        size += translation.size_of_topic(&topic->translation, size);
        size += rotation.size_of_topic(&topic->rotation, size);

        return size - previousSize;
    }

};

} // namespace geometry_msgs

#endif // _GEOMETRY_MSGS_TRANSFORM_H_