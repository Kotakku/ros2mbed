// This file was generated by the tool gen.

#ifndef _GEOMETRY_MSGS_TRANSFORMSTAMPED_H_
#define _GEOMETRY_MSGS_TRANSFORMSTAMPED_H_

#include "../topic.hpp"

// Manualy include list
// std_msgs::Header
// suggest
#include "std_msgs/Header.hpp"
// geometry_msgs::Transform
// suggest
#include "geometry_msgs/Transform.hpp"

namespace geometry_msgs
{

class TransformStamped: public ros2::Topic<TransformStamped>
{
public:
    using SharedPtr = std::shared_ptr<TransformStamped>;

    std_msgs::Header header;
    std::string child_frame_id;
    geometry_msgs::Transform transform;

    TransformStamped()
        : Topic("geometry_msgs::msg::dds_::TransformStamped_", "TransformStamped", GEOMETRY_MSGS_TRANSFORMSTAMPED_ID)
    {
    }

    bool serialize(void* msg_buf, TransformStamped* topic)
    {
        ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
        (void) header.serialize(writer, &topic->header);
        (void) ucdr_serialize_string(writer, topic->child_frame_id);
        (void) transform.serialize(writer, &topic->transform);

        return !writer->error;
    }

    bool deserialize(void* msg_buf, TransformStamped* topic)
    {
        ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
        (void) header.deserialize(reader, &topic->header);
        (void) ucdr_deserialize_string(reader, topic->child_frame_id);
        (void) transform.deserialize(reader, &topic->transform);

        return !reader->error;
    }

    uint32_t size_of_topic(const TransformStamped* topic, uint32_t size)
    {
        (void) (topic);

        uint32_t previousSize = size;
        size += header.size_of_topic(&topic->header, size);
        size += ucdr_alignment(size, 4) + 4 + (uint32_t)(topic->child_frame_id.length());
        size += transform.size_of_topic(&topic->transform, size);

        return size - previousSize;
    }

};

} // namespace geometry_msgs

#endif // _GEOMETRY_MSGS_TRANSFORMSTAMPED_H_