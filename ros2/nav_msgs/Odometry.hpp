// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/*! 
 * @file Odometry.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */
#ifndef _NAV_MSGS_ODOMETRY_HPP_
#define _NAV_MSGS_ODOMETRY_HPP_


#include "../topic.hpp"


#include "../std_msgs/Header.hpp"
#include "../geometry_msgs/PoseWithCovariance.hpp"
#include "../geometry_msgs/TwistWithCovariance.hpp"

namespace nav_msgs {


class Odometry : public ros2::Topic<Odometry>
{
public: 
    std_msgs::Header header;
    char child_frame_id[255];
    geometry_msgs::PoseWithCovariance pose;
    geometry_msgs::TwistWithCovariance twist;

  Odometry():
    Topic("nav_msgs::msg::dds_::Odometry_", "Odometry", NAV_MSGS_ODOMETRY_ID),
    header(), pose(), twist()
  {
    memset(child_frame_id, 0, sizeof(child_frame_id));
  }

  bool serialize(void* msg_buf, const Odometry* topic)
  {
    ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
    (void) header.serialize(writer, &topic->header);
    (void) ucdr_serialize_string(writer, topic->child_frame_id);
    (void) pose.serialize(writer, &topic->pose);
    (void) twist.serialize(writer, &topic->twist);

    return !writer->error;
  }

  bool deserialize(void* msg_buf, Odometry* topic)
  {
    ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
    (void) header.deserialize(reader, &topic->header);
    (void) ucdr_deserialize_string(reader, topic->child_frame_id, sizeof(topic->child_frame_id));
    (void) pose.deserialize(reader, &topic->pose);
    (void) twist.deserialize(reader, &topic->twist);
    
    return !reader->error;
  }

  uint32_t size_of_topic(const Odometry* topic, uint32_t size)
  {
    uint32_t previousSize = size;
    size += header.size_of_topic(&topic->header, size);
    size += ucdr_alignment(size, 4) + 4 + (uint32_t)(strlen(topic->child_frame_id) + 1);
    size += pose.size_of_topic(&topic->pose, size);
    size += twist.size_of_topic(&topic->twist, size);

    return size - previousSize;
  }

};

} // namespace nav_msgs


#endif // _NAV_MSGS_ODOMETRY_HPP_
