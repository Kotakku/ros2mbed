// This file was generated by the tool gen.

#ifndef _RCL_INTERFACES_LISTPARAMETERSRESULT_H_
#define _RCL_INTERFACES_LISTPARAMETERSRESULT_H_

#include "../topic.hpp"

// Manualy include list

namespace rcl_interfaces
{

class ListParametersResult: public ros2::Topic<ListParametersResult>
{
public:
    using SharedPtr = std::shared_ptr<ListParametersResult>;

    std::vector<std::string> names;
    std::vector<std::string> prefixes;

    ListParametersResult()
        : Topic("rcl_interfaces::msg::dds_::ListParametersResult_", "ListParametersResult", RCL_INTERFACES_LISTPARAMETERSRESULT_ID)
    {
    }

    bool serialize(void* msg_buf, ListParametersResult* topic)
    {
        ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
        (void) ucdr_serialize_vec_string(writer, topic->names);
        (void) ucdr_serialize_vec_string(writer, topic->prefixes);

        return !writer->error;
    }

    bool deserialize(void* msg_buf, ListParametersResult* topic)
    {
        ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
        (void) ucdr_deserialize_vec_string(reader, topic->names);
        (void) ucdr_deserialize_vec_string(reader, topic->prefixes);

        return !reader->error;
    }

    uint32_t size_of_topic(const ListParametersResult* topic, uint32_t size)
    {
        (void) (topic);

        uint32_t previousSize = size;
        size += ucdr_alignment(size, 4) + 4;
        for(size_t i = 0; i< topic->names.size(); i++)
        {
            size += ucdr_alignment(size, 4) + 4 + (uint32_t)(topic->names[i].length());
        }
        size += ucdr_alignment(size, 4) + 4;
        for(size_t i = 0; i< topic->prefixes.size(); i++)
        {
            size += ucdr_alignment(size, 4) + 4 + (uint32_t)(topic->prefixes[i].length());
        }

        return size - previousSize;
    }

};

} // namespace rcl_interfaces

#endif // _RCL_INTERFACES_LISTPARAMETERSRESULT_H_