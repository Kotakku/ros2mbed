// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/*! 
 * @file Imu.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */
#ifndef _SENSOR_MSGS_IMU_HPP_
#define _SENSOR_MSGS_IMU_HPP_


#include "../topic.hpp"


#include "../std_msgs/Header.hpp"
#include "../geometry_msgs/Quaternion.hpp"
#include "../geometry_msgs/Vector3.hpp"

namespace sensor_msgs {


class Imu : public ros2::Topic<Imu>
{
public: 
    std_msgs::Header header;
    geometry_msgs::Quaternion orientation;
    double orientation_covariance[9];
    geometry_msgs::Vector3 angular_velocity;
    double angular_velocity_covariance[9];
    geometry_msgs::Vector3 linear_acceleration;
    double linear_acceleration_covariance[9];

  Imu():
    Topic("sensor_msgs::msg::dds_::Imu_", "Imu", SENSOR_MSGS_IMU_ID),
    header(), orientation(), angular_velocity(), linear_acceleration()
  { 
    memset(orientation_covariance, 0, sizeof(orientation_covariance));
    memset(angular_velocity_covariance, 0, sizeof(angular_velocity_covariance));
    memset(linear_acceleration_covariance, 0, sizeof(linear_acceleration_covariance));
  }

  bool serialize(void* msg_buf, const Imu* topic)
  {
    ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
    (void) header.serialize(writer, &topic->header);
    (void) orientation.serialize(writer, &topic->orientation);
    (void) ucdr_serialize_array_double(writer, topic->orientation_covariance, 9);
    (void) angular_velocity.serialize(writer, &topic->angular_velocity);
    (void) ucdr_serialize_array_double(writer, topic->angular_velocity_covariance, 9);
    (void) linear_acceleration.serialize(writer, &topic->linear_acceleration);
    (void) ucdr_serialize_array_double(writer, topic->linear_acceleration_covariance, 9);

    return !writer->error;
  }

  bool deserialize(void* msg_buf, Imu* topic)
  {
    ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
    (void) header.deserialize(reader, &topic->header);
    (void) orientation.deserialize(reader, &topic->orientation);
    (void) ucdr_deserialize_array_double(reader, topic->orientation_covariance, 9);
    (void) angular_velocity.deserialize(reader, &topic->angular_velocity);
    (void) ucdr_deserialize_array_double(reader, topic->angular_velocity_covariance, 9);
    (void) linear_acceleration.deserialize(reader, &topic->linear_acceleration);
    (void) ucdr_deserialize_array_double(reader, topic->linear_acceleration_covariance, 9);

    return !reader->error;
  }

  uint32_t size_of_topic(const Imu* topic, uint32_t size)
  {
    uint32_t previousSize = size;

    size += header.size_of_topic(&topic->header, size);
    size += orientation.size_of_topic(&topic->orientation, size);
    size += ucdr_alignment(size, 8) + ((9) * 8);
    size += angular_velocity.size_of_topic(&topic->angular_velocity, size);
    size += ucdr_alignment(size, 8) + ((9) * 8);
    size += linear_acceleration.size_of_topic(&topic->linear_acceleration, size);
    size += ucdr_alignment(size, 8) + ((9) * 8);

    return size - previousSize;
  }

};

} // namespace sensor_msgs


#endif // _SENSOR_MSGS_IMU_HPP_
