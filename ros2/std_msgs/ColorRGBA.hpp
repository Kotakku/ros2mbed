// This file was generated by the tool gen.

#ifndef _STD_MSGS_COLORRGBA_H_
#define _STD_MSGS_COLORRGBA_H_

#include "../topic.hpp"

// Manualy include list

namespace std_msgs
{

class ColorRGBA: public ros2::Topic<ColorRGBA>
{
public:
    using SharedPtr = std::shared_ptr<ColorRGBA>;

    float r;
    float g;
    float b;
    float a;

    ColorRGBA()
        : Topic("std_msgs::msg::dds_::ColorRGBA_", "ColorRGBA", STD_MSGS_COLORRGBA_ID),
        r(0),
        g(0),
        b(0),
        a(0)
    {
    }

    bool serialize(void* msg_buf, ColorRGBA* topic)
    {
        ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
        (void) ucdr_serialize_float(writer, topic->r);
        (void) ucdr_serialize_float(writer, topic->g);
        (void) ucdr_serialize_float(writer, topic->b);
        (void) ucdr_serialize_float(writer, topic->a);

        return !writer->error;
    }

    bool deserialize(void* msg_buf, ColorRGBA* topic)
    {
        ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
        (void) ucdr_deserialize_float(reader, &topic->r);
        (void) ucdr_deserialize_float(reader, &topic->g);
        (void) ucdr_deserialize_float(reader, &topic->b);
        (void) ucdr_deserialize_float(reader, &topic->a);

        return !reader->error;
    }

    uint32_t size_of_topic(const ColorRGBA* topic, uint32_t size)
    {
        (void) (topic);

        uint32_t previousSize = size;
        size += ucdr_alignment(size, 4) + 4;
        size += ucdr_alignment(size, 4) + 4;
        size += ucdr_alignment(size, 4) + 4;
        size += ucdr_alignment(size, 4) + 4;

        return size - previousSize;
    }

};

} // namespace std_msgs

#endif // _STD_MSGS_COLORRGBA_H_