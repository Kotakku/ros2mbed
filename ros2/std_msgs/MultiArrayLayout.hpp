// This file was generated by the tool gen.

#ifndef _STD_MSGS_MULTIARRAYLAYOUT_H_
#define _STD_MSGS_MULTIARRAYLAYOUT_H_

#include "../topic.hpp"

// Manualy include list
// std_msgs::MultiArrayDimension
// suggest
#include "std_msgs/MultiArrayDimension.hpp"

namespace std_msgs
{

class MultiArrayLayout: public ros2::Topic<MultiArrayLayout>
{
public:
    using SharedPtr = std::shared_ptr<MultiArrayLayout>;

    std::vector<std_msgs::MultiArrayDimension> dim;
    uint32_t data_offset;

    MultiArrayLayout()
        : Topic("std_msgs::msg::dds_::MultiArrayLayout_", "MultiArrayLayout", STD_MSGS_MULTIARRAYLAYOUT_ID),
        data_offset(0)
    {
    }

    bool serialize(void* msg_buf, MultiArrayLayout* topic)
    {
        ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
        for(size_t i = 0; i < topic->dim.size(); i++)
        {
            (void) dim[i].serialize(writer, &topic->dim[i]);
        }
        (void) ucdr_serialize_uint32_t(writer, topic->data_offset);

        return !writer->error;
    }

    bool deserialize(void* msg_buf, MultiArrayLayout* topic)
    {
        ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
        for(size_t i = 0; i < topic->dim.size(); i++)
        {
            (void) dim[i].deserialize(reader, &topic->dim[i]);
        }
        (void) ucdr_deserialize_uint32_t(reader, &topic->data_offset);

        return !reader->error;
    }

    uint32_t size_of_topic(const MultiArrayLayout* topic, uint32_t size)
    {
        (void) (topic);

        uint32_t previousSize = size;
        for(size_t i = 0; i < topic->dim.size(); i++)
        {
            size += dim[i].size_of_topic(&topic->dim[i], size);
        }
        size += ucdr_alignment(size, 4) + 4;

        return size - previousSize;
    }

};

} // namespace std_msgs

#endif // _STD_MSGS_MULTIARRAYLAYOUT_H_