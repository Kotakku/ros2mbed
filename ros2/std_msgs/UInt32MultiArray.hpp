// This file was generated by the tool gen.

#ifndef _STD_MSGS_UINT32MULTIARRAY_H_
#define _STD_MSGS_UINT32MULTIARRAY_H_

#include "../topic.hpp"

// Manualy include list
// std_msgs::MultiArrayLayout
// suggest
#include "std_msgs/MultiArrayLayout.hpp"

namespace std_msgs
{

class UInt32MultiArray: public ros2::Topic<UInt32MultiArray>
{
public:
    using SharedPtr = std::shared_ptr<UInt32MultiArray>;

    std_msgs::MultiArrayLayout layout;
    std::vector<uint32_t> data;

    UInt32MultiArray()
        : Topic("std_msgs::msg::dds_::UInt32MultiArray_", "UInt32MultiArray", STD_MSGS_UINT32MULTIARRAY_ID)
    {
    }

    bool serialize(void* msg_buf, UInt32MultiArray* topic)
    {
        ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
        (void) layout.serialize(writer, &topic->layout);
        (void) ucdr_serialize_vec_uint32_t(writer, topic->data);

        return !writer->error;
    }

    bool deserialize(void* msg_buf, UInt32MultiArray* topic)
    {
        ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
        (void) layout.deserialize(reader, &topic->layout);
        (void) ucdr_deserialize_vec_uint32_t(reader, topic->data);

        return !reader->error;
    }

    uint32_t size_of_topic(const UInt32MultiArray* topic, uint32_t size)
    {
        (void) (topic);

        uint32_t previousSize = size;
        size += layout.size_of_topic(&topic->layout, size);
        size += ucdr_alignment(size, 4) + 4;
        size += ucdr_alignment(size, 4) + (topic->data.size() * 4);

        return size - previousSize;
    }

};

} // namespace std_msgs

#endif // _STD_MSGS_UINT32MULTIARRAY_H_