// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/*! 
 * @file VersionInfo.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */
#ifndef _TURTLEBOT3_MSGS_VERSION_INFO_HPP_
#define _TURTLEBOT3_MSGS_VERSION_INFO_HPP_

#include "../topic.hpp"


namespace turtlebot3_msgs {


class VersionInfo : public ros2::Topic<VersionInfo>
{
public: 
    char hardware[255];
    char firmware[255];
    char software[255];

  VersionInfo():
    Topic("turtlebot3_msgs::msg::dds_::VersionInfo_", "VersionInfo", TURTLEBOT3_MSGS_VERSION_INFO_ID)
  { 
    memset(hardware, 0, sizeof(hardware));
    memset(firmware, 0, sizeof(firmware));
    memset(software, 0, sizeof(software));
  }

  bool serialize(void* msg_buf, const VersionInfo* topic)
  {
    ucdrBuffer* writer = (ucdrBuffer*)msg_buf;
    (void) ucdr_serialize_string(writer, topic->hardware);
    (void) ucdr_serialize_string(writer, topic->firmware);
    (void) ucdr_serialize_string(writer, topic->software);

    return !writer->error;
  }

  bool deserialize(void* msg_buf, VersionInfo* topic)
  {
    ucdrBuffer* reader = (ucdrBuffer*)msg_buf;
    (void) ucdr_deserialize_string(reader, topic->hardware, sizeof(topic->hardware));
    (void) ucdr_deserialize_string(reader, topic->firmware, sizeof(topic->firmware));
    (void) ucdr_deserialize_string(reader, topic->software, sizeof(topic->software));

    return !reader->error;
  }

  uint32_t size_of_topic(const VersionInfo* topic, uint32_t size)
  {
    uint32_t previousSize = size;
    size += ucdr_alignment(size, 4) + 4 + (uint32_t)(strlen(topic->hardware) + 1);
    size += ucdr_alignment(size, 4) + 4 + (uint32_t)(strlen(topic->firmware) + 1);
    size += ucdr_alignment(size, 4) + 4 + (uint32_t)(strlen(topic->software) + 1);

    return size - previousSize;
  }

};

} // namespace turtlebot3_msgs


#endif // _TURTLEBOT3_MSGS_VERSION_INFO_HPP_
